import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

public class hill {

    private static final Random random = new Random();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of queens (n): ");
        int n = scanner.nextInt();
        scanner.close();

        int[] solution = hillClimbingWithRandomRestart(n);
        System.out.println("Solution for " + n + "-Queens: ");
        printBoard(solution);
        System.out.println("Number of conflicts: " + calculateConflicts(solution));
    }

    private static int[] hillClimbingWithRandomRestart(int n) {
        int maxRestarts = 1000; // Maximum number of random restarts
        int[] bestSolution = null;
        int bestConflicts = Integer.MAX_VALUE;

        for (int restart = 0; restart < maxRestarts; restart++) {
            int[] current = generateRandomBoard(n);
            while (true) {
                List<int[]> neighbors = generateNeighbors(current);
                int[] next = Collections.min(neighbors,
                        (a, b) -> Integer.compare(calculateConflicts(a), calculateConflicts(b)));
                if (calculateConflicts(next) >= calculateConflicts(current)) {
                    int currentConflicts = calculateConflicts(current);
                    if (currentConflicts < bestConflicts) {
                        bestSolution = current;
                        bestConflicts = currentConflicts;
                    }
                    break;
                }
                current = next;
            }

            if (bestConflicts == 0) {
                break; // Solution found
            }
        }

        return bestSolution;
    }

    private static int[] generateRandomBoard(int n) {
        int[] board = new int[n];
        for (int i = 0; i < n; i++) {
            board[i] = random.nextInt(n);
        }
        return board;
    }

    private static List<int[]> generateNeighbors(int[] board) {
        List<int[]> neighbors = new ArrayList<>();
        int n = board.length;
        for (int row = 0; row < n; row++) {
            for (int col = 0; col < n; col++) {
                if (col != board[row]) {
                    int[] newBoard = board.clone();
                    newBoard[row] = col;
                    neighbors.add(newBoard);
                }
            }
        }
        return neighbors;
    }

    private static int calculateConflicts(int[] board) {
        int conflicts = 0;
        int n = board.length;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (board[i] == board[j] || Math.abs(board[i] - board[j]) == Math.abs(i - j)) {
                    conflicts += 1;
                }
            }
        }
        return conflicts;
    }

    private static void printBoard(int[] board) {
        int n = board.length;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i] == j) {
                    System.out.print("Q ");
                } else {
                    System.out.print(". ");
                }
            }
            System.out.println();
        }
    }
}